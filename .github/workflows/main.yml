name: Ephemeral-Admin-Runner

on:
  workflow_dispatch:

jobs:
  create-admin-and-keepalive:
    runs-on: ubuntu-latest
    timeout-minutes: 360  # max 6 hours for GitHub Free plan
    steps:
      - name: Start - show notice
        run: |
          echo "This workflow creates a local sudo-capable user and optionally enables root."
          echo "It DOES NOT open network ports or enable remote RDP access."

      - name: Update apt cache
        run: sudo apt-get update -y

      - name: Install required utilities
        run: sudo apt-get install -y curl jq git netcat-openbsd pwgen

      - name: Create admin user (RDP) with strong random password
        id: create_user
        run: |
          set -euo pipefail
          USERNAME="RDP"
          PASSWORD="$(pwgen -s 24 1)"
          if id "$USERNAME" >/dev/null 2>&1; then
            echo "User $USERNAME already exists - resetting password and granting sudo."
          else
            sudo useradd -m -s /bin/bash "$USERNAME"
          fi
          echo "${USERNAME}:${PASSWORD}" | sudo chpasswd
          sudo usermod -aG sudo "$USERNAME"
          echo "::add-mask::$PASSWORD"
          echo "RDP_USER=${USERNAME}" >> $GITHUB_ENV
          echo "RDP_PASS=${PASSWORD}" >> $GITHUB_ENV

      - name: (Optional) Enable root account if secret ENABLE_ROOT=true
        env:
          ENABLE_ROOT: ${{ secrets.ENABLE_ROOT }}
          ROOT_PASSWORD: ${{ secrets.ROOT_PASSWORD }}
        run: |
          set -euo pipefail
          if [ "$ENABLE_ROOT" = "true" ]; then
            if [ -z "$ROOT_PASSWORD" ]; then
              echo "ROOT_PASSWORD secret is empty. Exiting."
              exit 1
            fi
            echo "root:$ROOT_PASSWORD" | sudo chpasswd
            sudo passwd -u root || true
            echo "::add-mask::$ROOT_PASSWORD"
            echo "ROOT_ENABLED=true" >> $GITHUB_ENV
          else
            echo "Skipping root enable."
          fi

      - name: Verify sudo for created user
        run: |
          sudo -u ${RDP_USER} -H bash -c "sudo -n true" || echo "Interactive sudo may require password"

      - name: Save credentials and runner IP as artifact
        run: |
          mkdir -p /tmp/rdp_creds
          echo "USER=${RDP_USER}" > /tmp/rdp_creds/creds.txt
          echo "PASS=${RDP_PASS}" >> /tmp/rdp_creds/creds.txt
          # internal and external IPs
          echo "RUNNER_INTERNAL_IP=$(hostname -I 2>/dev/null | awk '{print $1}')" >> /tmp/rdp_creds/creds.txt
          echo "RUNNER_EXTERNAL_IP=$(curl -fsS ifconfig.me || echo 'no-external-ip')" >> /tmp/rdp_creds/creds.txt
        uses: actions/upload-artifact@v4
        with:
          name: rdp-creds
          path: /tmp/rdp_creds/creds.txt

      - name: Keep the job alive (5 hours)
        run: |
          echo "Runner will stay alive for 18000 seconds (5 hours)."
          END=$(( $(date +%s) + 18000 ))
          while [ $(date +%s) -lt $END ]; do
            echo "[$(date --iso-8601=seconds)] Runner alive; time left: $(( END - $(date +%s) ))s"
            sleep 300
          done
